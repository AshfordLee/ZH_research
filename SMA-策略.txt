Problem
=======

考虑某一股票的价格P，每过一段时间我们能获得一对数(t, Pt)，分别为当前的时间戳t和当前该股票的价格Pt，需要计算该股票在[t-W, t]时间段内的平均价格，
其中W是事先给定的窗口大小，单位和t相同。

请编写程序来实现这个计算过程。接口参见以下Interface节。

算法需要满足以下要求：

1. 相邻数据点之间的间隔不固定，可能有较大变化，在计算的时候应考虑数据间隔变化极端的情况下的鲁棒性;
2. 计算的平均价格应能较好反映股票价格在窗口时间内的“平均水平”
3. 假设在相邻两次数据到达期间内，股票的真实价格都等于前一次数据的价格
4. 所谓平均水平指的是股票价格在窗口内的简单移动平均（SMA）而不是指数移动平均（EMA）
5. 可用的内存大小是有限的，为O(num_bin)规模，当窗口内到达的数据量超过可用的存储空间时，应做一定的取舍，既不突破内存限制，又尽可能保证结果的精确性（只是简单地把尾部数据删除是不行的）
6. 实现以下MovingAverage接口
7. 尽量使用性能较优的算法和实现方法

编程语言：不限

Note
====

num_bin: 使用的内存大小应为O(num_bin)级别
window：移动平均的窗口长度

timestamp是时间戳，浮点数，数据间隔不固定，可能一秒来几十个数据，也可能几小时来一个数据


Interface
=========

（以python为例）
class MovingAverage:
    def __init__(self, num_bin: int, window: float):
        pass

    def Get(self) -> float:
        "返回当前计算的平均值"
        raise NotImplementedError
        
    def Update(self, timestamp: float, value: float):
        "新数据到达，更新状态"
        raise NotImplementedError

每次数据到达时，会依次调用Update和Get方法
